import requests
from bs4 import BeautifulSoup

# defining a tagret url
target_url = input("Enter the target URL: ")
print(f"Scanning the URL: {target_url}")
vulnerabilities = []

# SQL injection check
def check_sql_injection(url):
    sql_payloads = ["'", "';", "--", "' OR '1'='1"]
    vulnerability = False
    for payload in sql_payloads:
        response = requests.get(url + payload)
        if "error" in response.text or "syntax" in response.text:
            vulnerability = True
            break
    return vulnerability

# XSS check
def xss_check(url):
    xss_payloads = ['<script>alert(1)</script>', '" onerror="alert(1)"']
    vulnerability = False
    for payload in xss_payloads:
        response = requests.get(url + payload)
        if payload in response.text:
            vulnerability - True
            break
    return vulnerability 

# Open directory check
def check_open_directories(url):
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        if soup.title and "index of" in soup.title.text:
            return True
    return False

# Directory Traversal 
def directory_traversal_check(url):
    traversal_payloads = ["../", "../../", "../../../etc/passwd"]
    vulnerable = False
    for payload in traversal_payloads:
        response = requests.get(url + payload)
        if "root:" in response.text:
            vulnerable = True
            break
    return vulnerable

# checking HTTP headers
def check_http_headers(url):
    response = requests.head(url)
    missing_headers = []
    security_headers = {
        "X-Content-Type-Options": "nosniff",
        "X-Frame-Options": "DENY",
        "Content-Security-Policy": "default-src 'self'"
    }
    for header, value in security_headers.items():
        if header not in response.headers or response.headers[header] != value:
            missing_headers.append(header)
    return missing_headers

# running the sql injection check
if check_sql_injection(target_url):
    vulnerabilities.append("SQL Injection")

# running the xss check
if xss_check(target_url):
    vulnerabilities.append("Cross-Site Scripting (XXS)")

# running the open directories check
if check_open_directories(target_url):
    vulnerabilities.append("Open Directories")

# Running the directory traversal check
if directory_traversal_check(target_url):
    vulnerabilities.append("Directory Traversal")

# Running the HTTP headers check
missing_headers = check_http_headers(target_url)
if missing_headers:
    vulnerabilities.append(f"Missing Security Headers: {', '.join(missing_headers)}")


# shows the results of the scans
if vulnerabilities:
    print(f"The target URL {target_url} is vulnerable to the following:")
    for vuln in vulnerabilities:
        print(f"- {vuln}")
else:
    print(f"No common vulnerabilities found for {target_url}")